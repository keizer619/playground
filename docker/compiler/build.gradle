configurations {
    compilerPlugins {
        transitive = false
    }
    api {
        transitive = false
    }
}

def getDateSuffix() {
    return "-" + new Date().format('yyyyMMddHHmmss')
}

def env = System.getenv()
def gcpProjectID = env["BPG_GCP_PROJECT_ID"]
def imageTag = 'gcr.io/' + gcpProjectID +'/playground-compiler:' + project.version + getDateSuffix()

dependencies {
    compilerPlugins project(":utils:compiler-plugin")
    api project(path: ":api:compiler", configuration: "apiJar")
}

task copyApi(type: Copy) {
    dependsOn(':api:compiler:build')
    from configurations.api
    into "api" 
}

task copyCompilerPlugins(type: Copy) {
    dependsOn(':utils:compiler-plugin:build')
    from configurations.compilerPlugins
    into "plugins" 
}

def inputFiles = [
    project.file("cloudbuild.yaml"),
    project.file("Dockerfile"),
    project.file("resources")
]

task clean(type: Delete) {
   delete 'api', 'plugins'
   followSymlinks = true
}

task cloudBuild(type: Exec) {
    dependsOn clean
    dependsOn copyApi
    // dependsOn copyCompilerPlugins: FIXME Re-enable after updating service check compiler plugin to beta3
    inputs.files(inputFiles)
    environment("BALLERINA_VERSION", project.ext.ballerinaVersion)
    commandLine "gcloud", "builds", "submit", "--config", "cloudbuild.yaml",
        '--substitutions=_IMAGE_TAG=' + imageTag + ',_BALLERINA_VERSION=' + project.ext.ballerinaVersion, "."
}

task build(type: Exec) {
    dependsOn clean
    dependsOn copyApi
    // dependsOn copyCompilerPlugins: FIXME Re-enable after updating service check compiler plugin to beta3
    inputs.files(inputFiles)
    commandLine 'docker', 'build', '-t', imageTag,
            '--build-arg', 'BALLERINA_VERSION=' + project.ext.ballerinaVersion, '.'
}

def containerIdFile = new File(projectDir, "containerId.txt");
if (!containerIdFile.exists()) {
    containerIdFile.write("");
}

task start(type: Exec) {
    dependsOn build
    commandLine "docker", "run", "-d", "-v", projectDir.toString() + "/build-cache:/build-cache", "-p", "9091:9090", imageTag
    standardOutput = new ByteArrayOutputStream()
	doLast {
        containerIdFile.text = standardOutput.toString()
        println standardOutput.toString()
	}
}

task logs(type: Exec) {
    commandLine "docker", "logs", "-f", containerIdFile.text.trim()
}

task stop(type: Exec) {
    commandLine "docker", "kill", containerIdFile.text.trim()
    doLast {
        containerIdFile.text = ""
	}
}

